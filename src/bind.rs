/* automatically generated by rust-bindgen 0.59.1 */

//! Rust FFI to `SDL_net.h`

#![allow(warnings)]

pub type Uint8 = u8;
pub type Uint16 = u16;
pub type Uint32 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SDL_version {
    pub major: Uint8,
    pub minor: Uint8,
    pub patch: Uint8,
}
#[test]
fn bindgen_test_layout_SDL_version() {
    assert_eq!(
        ::std::mem::size_of::<SDL_version>(),
        3usize,
        concat!("Size of: ", stringify!(SDL_version))
    );
    assert_eq!(
        ::std::mem::align_of::<SDL_version>(),
        1usize,
        concat!("Alignment of ", stringify!(SDL_version))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SDL_version>())).major as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_version),
            "::",
            stringify!(major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SDL_version>())).minor as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_version),
            "::",
            stringify!(minor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SDL_version>())).patch as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(SDL_version),
            "::",
            stringify!(patch)
        )
    );
}
pub type SDLNet_version = SDL_version;
extern "C" {
    pub fn SDLNet_Linked_Version() -> *const SDLNet_version;
}
extern "C" {
    pub fn SDLNet_Init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDLNet_Quit();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IPaddress {
    pub host: Uint32,
    pub port: Uint16,
}
#[test]
fn bindgen_test_layout_IPaddress() {
    assert_eq!(
        ::std::mem::size_of::<IPaddress>(),
        8usize,
        concat!("Size of: ", stringify!(IPaddress))
    );
    assert_eq!(
        ::std::mem::align_of::<IPaddress>(),
        4usize,
        concat!("Alignment of ", stringify!(IPaddress))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IPaddress>())).host as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IPaddress),
            "::",
            stringify!(host)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IPaddress>())).port as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(IPaddress),
            "::",
            stringify!(port)
        )
    );
}
extern "C" {
    pub fn SDLNet_ResolveHost(
        address: *mut IPaddress,
        host: *const ::std::os::raw::c_char,
        port: Uint16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDLNet_ResolveIP(ip: *const IPaddress) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SDLNet_GetLocalAddresses(
        addresses: *mut IPaddress,
        maxcount: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TCPsocket {
    _unused: [u8; 0],
}
pub type TCPsocket = *mut _TCPsocket;
extern "C" {
    pub fn SDLNet_TCP_Open(ip: *mut IPaddress) -> TCPsocket;
}
extern "C" {
    pub fn SDLNet_TCP_Accept(server: TCPsocket) -> TCPsocket;
}
extern "C" {
    pub fn SDLNet_TCP_GetPeerAddress(sock: TCPsocket) -> *mut IPaddress;
}
extern "C" {
    pub fn SDLNet_TCP_Send(
        sock: TCPsocket,
        data: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDLNet_TCP_Recv(
        sock: TCPsocket,
        data: *mut ::std::os::raw::c_void,
        maxlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDLNet_TCP_Close(sock: TCPsocket);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _UDPsocket {
    _unused: [u8; 0],
}
pub type UDPsocket = *mut _UDPsocket;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UDPpacket {
    pub channel: ::std::os::raw::c_int,
    pub data: *mut Uint8,
    pub len: ::std::os::raw::c_int,
    pub maxlen: ::std::os::raw::c_int,
    pub status: ::std::os::raw::c_int,
    pub address: IPaddress,
}
#[test]
fn bindgen_test_layout_UDPpacket() {
    assert_eq!(
        ::std::mem::size_of::<UDPpacket>(),
        40usize,
        concat!("Size of: ", stringify!(UDPpacket))
    );
    assert_eq!(
        ::std::mem::align_of::<UDPpacket>(),
        8usize,
        concat!("Alignment of ", stringify!(UDPpacket))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UDPpacket>())).channel as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(UDPpacket),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UDPpacket>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(UDPpacket),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UDPpacket>())).len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(UDPpacket),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UDPpacket>())).maxlen as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(UDPpacket),
            "::",
            stringify!(maxlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UDPpacket>())).status as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(UDPpacket),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UDPpacket>())).address as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(UDPpacket),
            "::",
            stringify!(address)
        )
    );
}
extern "C" {
    pub fn SDLNet_AllocPacket(size: ::std::os::raw::c_int) -> *mut UDPpacket;
}
extern "C" {
    pub fn SDLNet_ResizePacket(
        packet: *mut UDPpacket,
        newsize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDLNet_FreePacket(packet: *mut UDPpacket);
}
extern "C" {
    pub fn SDLNet_AllocPacketV(
        howmany: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
    ) -> *mut *mut UDPpacket;
}
extern "C" {
    pub fn SDLNet_FreePacketV(packetV: *mut *mut UDPpacket);
}
extern "C" {
    pub fn SDLNet_UDP_Open(port: Uint16) -> UDPsocket;
}
extern "C" {
    pub fn SDLNet_UDP_SetPacketLoss(sock: UDPsocket, percent: ::std::os::raw::c_int);
}
extern "C" {
    pub fn SDLNet_UDP_Bind(
        sock: UDPsocket,
        channel: ::std::os::raw::c_int,
        address: *const IPaddress,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDLNet_UDP_Unbind(sock: UDPsocket, channel: ::std::os::raw::c_int);
}
extern "C" {
    pub fn SDLNet_UDP_GetPeerAddress(
        sock: UDPsocket,
        channel: ::std::os::raw::c_int,
    ) -> *mut IPaddress;
}
extern "C" {
    pub fn SDLNet_UDP_SendV(
        sock: UDPsocket,
        packets: *mut *mut UDPpacket,
        npackets: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDLNet_UDP_Send(
        sock: UDPsocket,
        channel: ::std::os::raw::c_int,
        packet: *mut UDPpacket,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDLNet_UDP_RecvV(sock: UDPsocket, packets: *mut *mut UDPpacket)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDLNet_UDP_Recv(sock: UDPsocket, packet: *mut UDPpacket) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDLNet_UDP_Close(sock: UDPsocket);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SDLNet_SocketSet {
    _unused: [u8; 0],
}
pub type SDLNet_SocketSet = *mut _SDLNet_SocketSet;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SDLNet_GenericSocket {
    pub ready: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__SDLNet_GenericSocket() {
    assert_eq!(
        ::std::mem::size_of::<_SDLNet_GenericSocket>(),
        4usize,
        concat!("Size of: ", stringify!(_SDLNet_GenericSocket))
    );
    assert_eq!(
        ::std::mem::align_of::<_SDLNet_GenericSocket>(),
        4usize,
        concat!("Alignment of ", stringify!(_SDLNet_GenericSocket))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_SDLNet_GenericSocket>())).ready as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_SDLNet_GenericSocket),
            "::",
            stringify!(ready)
        )
    );
}
pub type SDLNet_GenericSocket = *mut _SDLNet_GenericSocket;
extern "C" {
    pub fn SDLNet_AllocSocketSet(maxsockets: ::std::os::raw::c_int) -> SDLNet_SocketSet;
}
extern "C" {
    pub fn SDLNet_AddSocket(
        set: SDLNet_SocketSet,
        sock: SDLNet_GenericSocket,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDLNet_DelSocket(
        set: SDLNet_SocketSet,
        sock: SDLNet_GenericSocket,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDLNet_CheckSockets(set: SDLNet_SocketSet, timeout: Uint32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SDLNet_FreeSocketSet(set: SDLNet_SocketSet);
}
extern "C" {
    pub fn SDLNet_SetError(fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn SDLNet_GetError() -> *const ::std::os::raw::c_char;
}
